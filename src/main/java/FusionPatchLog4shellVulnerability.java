import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Objects;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;
import java.util.regex.Pattern;
import java.util.stream.Stream;

public class FusionPatchLog4shellVulnerability {

  public static final int LOG4J_2_ACCEPTABLE_MINOR_RELEASE = 16;
  static Pattern affectedJarPattern = Pattern.compile("log4j.*-2\\..*\\.jar");
  static Pattern cpAffectedJarPattern = Pattern.compile("apps/libs/log4j.*-2\\..*\\.jar");

  static Pattern affectedLog4jConfigPattern = Pattern.compile(".*log4j.*\\.(xml|properties)");
  static String affectedLog4jConfigText = "%m%n";
  static String log4jConfigTextFixed = "%m{nolookups}%n";

  static String newLibVersion;

  public static void main(String[] args) throws Exception {
    File fusionHome;
    if (args.length == 0) {
      fusionHome = new File(".");
    } else {
      fusionHome = new File(args[0]);
    }

    System.out.println(
        "This program will patch your Fusion 3.x or 4.x installation for log4jshell vulnerability CVE-2021-45046 and CVE-2021-44228");
    System.out.println("Fusion directory: " + fusionHome.getCanonicalPath());

    File fusionBuild = new File(fusionHome, "fusion.build");
    if (!fusionBuild.exists()) {
      System.out.println("ERROR: Fusion build file " + fusionBuild +
          " not found. Fusion directory " + fusionHome + " does not appear to be a valid Fusion installation.");
      System.exit(1);
    }

    Properties fusionBuildProps = new Properties();
    fusionBuildProps.load(new FileInputStream(fusionBuild));
    String fusionVersion = (String)fusionBuildProps.get("fusion.version");

    newLibVersion = fusionVersion.startsWith("4.1.1") ||
        fusionVersion.startsWith("4.1.2") ||
        fusionVersion.startsWith("4.1.3") ||
        fusionVersion.startsWith("4.2.0") ||
        fusionVersion.startsWith("4.2.1") ||
        fusionVersion.startsWith("4.2.2") ||
        fusionVersion.startsWith("4.2.3") ||
        fusionVersion.startsWith("4.2.5") ||
        fusionVersion.startsWith("4.2.6") ? "2.16.0" : "2.8.2-cve-2021-44228";
    Set<String> affectedFiles = new TreeSet<>();

    try (Stream<Path> walkStream = Files.walk(fusionHome.toPath())) {
      walkStream.filter(p -> p.toFile().isFile()).forEach(f -> {
        if (affectedJarPattern.matcher(f.getFileName().toString()).matches()) {
          String affectedFile = f.getFileName().toString();
          String affectedArtifact = affectedFile.substring(0, affectedFile.lastIndexOf("-"));
          String[] affectedVersion =
              affectedFile.substring(affectedFile.lastIndexOf("-") + 1, affectedFile.lastIndexOf(".")).split("\\.");
          if (Integer.parseInt(affectedVersion[1]) < LOG4J_2_ACCEPTABLE_MINOR_RELEASE && !f.getFileName().toString().contains(newLibVersion)) {
            System.out.println("Affected file found: " + f);
            affectedFiles.add(affectedFile);
            try {
              File newArtifact = new File(f.toFile().getParentFile(), affectedArtifact + "-" + newLibVersion + ".jar");
              System.out.println("Copying patched jar file: " + newArtifact);
              FileUtils.copyInputStreamToFile(Objects.requireNonNull(
                  FusionPatchLog4shellVulnerability.class.getResourceAsStream(
                      "jars/" + affectedArtifact + "-" + newLibVersion + ".jar")), newArtifact);
            } catch (IOException e) {
              throw new RuntimeException(e);
            }
            System.out.println("Deleting vulnerable jar file: " + f);
            if (!f.toFile().delete()) {
              System.out.println("Could not delete vulnerable file: " + f);
              System.exit(1);
            }
          }
        }
      });
    }
    System.out.println("Vulnerable jars updated:");
    if (affectedFiles.isEmpty()) {
      System.out.println("  (None found)");
    }
    for (String affectedFile : affectedFiles) {
      System.out.println("  " + affectedFile);
    }
    patchExtraClasspathTextFile(
        Paths.get(fusionHome.getAbsolutePath(), "apps", "jetty", "api", "webapps", "api-extra-classpath.txt").toFile());
    patchExtraClasspathTextFile(
        Paths.get(fusionHome.getAbsolutePath(), "apps", "jetty", "connectors-classic", "webapps",
            "connectors-extra-classpath.txt").toFile());

    try (Stream<Path> walkStream = Files.walk(fusionHome.toPath())) {
      walkStream.filter(p -> p.toFile().isFile()).forEach(f -> {
        if (affectedLog4jConfigPattern.matcher(f.getFileName().toString()).matches()) {
          try {
            String xml = FileUtils.readFileToString(f.toFile(), StandardCharsets.UTF_8);
            if (xml.contains(affectedLog4jConfigText)) {
              FileUtils.writeStringToFile(f.toFile(), xml.replace(affectedLog4jConfigText, log4jConfigTextFixed),
                  StandardCharsets.UTF_8);
              System.out.println("Updated vulnerable log4j config file " + f);
            }
          } catch (IOException e) {
            throw new RuntimeException(e);
          }
        }
      });
    }

    try (Stream<Path> walkStream = Files.walk(fusionHome.toPath())) {
      walkStream.filter(p -> p.toFile().isFile()).forEach(f -> {
        if (FilenameUtils.getExtension(f.getFileName().toString()).equalsIgnoreCase("war")) {
          try {
            updateLog4j2InWar(f.toAbsolutePath().toString());
          } catch (IOException e) {
            e.printStackTrace();
          }
        }
      });
    }


    System.out.println("Update complete.");
  }

  private static void patchExtraClasspathTextFile(File extraClasspath) throws IOException {
    if (!extraClasspath.exists()) {
      return;
    }
    System.out.println("Updating " + extraClasspath + " if needed...");
    int updated = 0;
    List<String> lines = FileUtils.readLines(extraClasspath, StandardCharsets.UTF_8);
    for (int i = 0; i < lines.size(); ++i) {
      String line = lines.get(i);
      if (cpAffectedJarPattern.matcher(line).matches()) {
        String affectedArtifact = line.substring(0, line.lastIndexOf("-"));
        String[] affectedVersion = line.substring(line.lastIndexOf("-") + 1, line.lastIndexOf(".")).split("\\.");
        if (Integer.parseInt(affectedVersion[1]) < LOG4J_2_ACCEPTABLE_MINOR_RELEASE && !line.contains(newLibVersion)) {
          String newArtifact = affectedArtifact + "-" + newLibVersion + ".jar";
          System.out.println("  Replacing " + line + " with " + newArtifact);
          lines.set(i, newArtifact);
          ++updated;
        }
      }
    }
    FileUtils.writeLines(extraClasspath, lines);
    System.out.println("  -- updated " + updated + " lines.");
  }

  static void updateLog4j2InWar(String warFilePath) throws IOException {
    System.out.println("Checking war file " + warFilePath + " for vulnerabilities");
    Path zipFilePath = Paths.get(warFilePath);
    try (FileSystem fs = FileSystems.newFileSystem(zipFilePath, null)) {
      Path log4j2 = fs.getPath("/WEB-INF/classes/log4j2.xml");
      fixFileInWar(fs, log4j2, warFilePath);
      Path logback = fs.getPath("/WEB-INF/classes/logback.xml");
      fixFileInWar(fs, logback, warFilePath);
      Path log4jprop = fs.getPath("/WEB-INF/classes/log4j.properties");
      fixFileInWar(fs, log4jprop, warFilePath);
    }
  }

  private static void fixFileInWar(FileSystem fs, Path fileToFix, String warFilePath) throws IOException {
    Path temp = fs.getPath("/WEB-INF/classes/" + UUID.randomUUID());
    if (Files.exists(fileToFix)) {
      Files.move(fileToFix, temp);
      streamCopy(temp, fileToFix, warFilePath);
      Files.delete(temp);
    }
  }


  static void streamCopy(Path src, Path dst, String warFilePath) throws IOException {
    try (BufferedReader br = new BufferedReader(
        new InputStreamReader(Files.newInputStream(src)));
         BufferedWriter bw = new BufferedWriter(
             new OutputStreamWriter(Files.newOutputStream(dst)))) {

      int lineNum = 0;
      String line;
      while ((line = br.readLine()) != null) {
        ++lineNum;
        if (line.contains("%m") && !line.contains("%m{nolookups}")) {
          System.out.println("Fixing line " + lineNum + " in " + dst + " from war file " + warFilePath);
          line = line.replace(affectedLog4jConfigText, log4jConfigTextFixed);
          line = line.replace("%msg %n", log4jConfigTextFixed);
          line = line.replace("%m %n", log4jConfigTextFixed);
        }
        bw.write(line);
        bw.newLine();
      }
    }
  }
}
